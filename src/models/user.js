const mongoose = require("mongoose");
const validator = require('validator'); // schema levelvalidation
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const userSchema = new mongoose.Schema({

    firstName:{
        type: String,
        minlength: 2,
        maxlength: 50,
        required: true,
    },
    lastName: {
            type: String,
            minlength: 2,
            maxlength: 50,
            required: true,
        },
        about : {
            type: String,
            maxlength: 500,
            default: "This user has not provided any information about themselves.",
            trim: true,
            validate(value) {   
                if (value && value.length > 500) {
                    throw new Error("About section must be less than 500 characters");
                }
            }
        },
        emailId: {
            type: String,
            required: true,
            unique: true, // mongodb automaticaally makes the indexing 
            lowercase: true,
            trim: true,
            validate(value) {
                if (!validator.isEmail(value)) {
                    throw new Error("Invalid email format" + value);
                }
            }
        },
        password: {
            type: String,
            required: true,
            validate(value){
                if(!validator.isStrongPassword(value, {
                    minLength: 8,
                    minLowercase: 1,
                    minUppercase: 1,
                    minNumbers: 1,
                    minSymbols: 1
                })) {
                    throw new Error("Password must be strong");
                }
            }
        },
        age: {
            type: Number,
            min:18,
            required: true,
        },
        photoUrl: {
          type:String,
            required: true,
            default: "https://example.com/default-profile.png",
            validate(value) {
                if (!validator.isURL(value)) {
                    throw new Error("Invalid URL format" + value);
                }
            }
        },
        skills: {
            type: [String]
        },
        gender:{
            type: String,
            validate(value){
                if(!["male", "female", "other"].includes(value)){
                    throw new Error("invalid gender type")
                }
            }
        }

    }
)


userSchema.methods.getJWT = async function() {
    const user = this;
  const token = await jwt.sign({_id: user._id} , "Devsnest$790",{
  expiresIn: "1h"
  } );  
  return token;
}

userSchema.methods.validatePassword = async function(passwordInputByuser)
{
    const user = this;
     const passwordHash = user.password
    const isPasswordValid = await bcrypt.compare(passwordInputByuser,passwordHash);

    return isPasswordValid
}

    module.exports = mongoose.model("User", userSchema);
// This code defines a Mongoose schema and model for a User in a MongoDB database
// _id is a unique string and automatically generated by MongoDB
